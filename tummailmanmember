#!/usr/bin/env python
#
#  Postfix external policy filter for rejecting messages which are not from
#  a list member at SMTP time.
#
#  Copyright (c) 2006, 2008, 2009, 2013 Sean Reifschneider, tummy.com, ltd.
#  All Rights Reserved
#  <jafo@tummy.com>

G_DebugLevel = 2
listHashFile = '/var/lib/mailman/data/virtual-mailman.db'
suffixList = [
    ('-unsubscribe', 'check'),
    ('-leave', 'check'),
    ('-request', 'ignore'),
    ('-admin', 'ignore'),
    ('-bounces', 'ignore'),
    ('-confirm', 'ignore'),
    ('-join', 'ignore'),
    ('-owner', 'ignore'),
    ('-subscribe', 'ignore'),
    ('', 'check'),
]

from syslog import syslog, openlog, LOG_PID, LOG_MAIL
import os
import string
import re
import anydbm
import sys

sys.path.append('/usr/lib/mailman')
from Mailman import MailList, Errors
from Mailman.Handlers.Moderate import matches_p

openlog(os.path.basename(sys.argv[0]), LOG_PID, LOG_MAIL)


#################
class ExceptHook:
    def __init__(self, useSyslog=1, useStderr=0):
        self.useSyslog = useSyslog
        self.useStderr = useStderr

    def __call__(self, etype, evalue, etb):
        import traceback
        import string

        tb = traceback.format_exception(*(etype, evalue, etb))
        tb = map(string.rstrip, tb)
        tb = string.join(tb, '\n')
        for line in string.split(tb, '\n'):
            if self.useSyslog:
                syslog(line)
            if self.useStderr:
                sys.stderr.write(line + '\n')


####################
sys.excepthook = ExceptHook(useSyslog=1, useStderr=1)


def debug(level, message):
    if G_DebugLevel >= level:
        syslog(message)


def listmembercheck(data):
    ret = ('dunno', '')

    recipient = data.get('recipient')
    if not recipient:
        debug(0, 'tummailmanmember: No recipient, exiting')
        return ret

    sender = data.get('sender')
    if not sender:
        debug(0, 'tummailmanmember: No sender, exiting')
        return ret

    debug(2, 'tummailmanmember: Checking recipient "%s" and sender "%s"'
             % (recipient, sender))

    #  look up recipient in mailing list db
    mlDb = anydbm.open(listHashFile, 'r')
    res = mlDb.get(recipient)
    #  the database keys seem to be NUL terminated
    if not res:
        res = mlDb.get(recipient + '\0')
    if not res:
        debug(2, 'tummailmanmember: Recipient address is not in the mail '
                 'list hash, aborting.')
        return ret

    #  split out the recipient address into user and domain
    recipientAddressParts = string.split(recipient, '@', 1)
    if len(recipientAddressParts) != 2:
        debug(3, 'tummailmanmember: '
                 'Recipient address not in user@domain format')
        return ret

    #  check the suffix to see if it makes a list and what action to take
    listName = None
    listAction = None
    mlist = None
    for suffix, action in suffixList:
        if recipientAddressParts[0].endswith(suffix):
            if len(suffix):
                listName = recipientAddressParts[0][:0 - len(suffix)]
            else:
                listName = recipientAddressParts[0]

            try:
                mlist = MailList.MailList(listName, lock=False)
            except Errors.MMUnknownListError:
                continue

            debug(3, 'tummailmanmember: Matched suffix "%s" in local '
                     'part "%s"' % (suffix, recipientAddressParts[0]))

            listAction = action
            break

    debug(3, 'tummailmanmember: Recipient list "%s" found, action "%s"'
             % (listName, repr(listAction)))

    #  abort due action missing or "ignore"
    if not listAction or listAction == 'ignore':
        debug(3, 'tummailmanmember: Aborting due to list action "%s"'
                 % str(listAction))
        return ret

    valid_sender = False

    #  accept messages from list owner - added by scott@tummy.com 20080715
    if sender in mlist.owner:
        debug(0, 'tummailmanmember: Is the list owner')
        valid_sender = True
        return ret

    if not valid_sender and mlist.isMember(sender):
        debug(0, 'tummailmanmember: Is a member')
        valid_sender = True

    try:
        if not valid_sender and matches_p(
                sender, mlist.hold_these_nonmembers, listName):
            debug(0, 'tummailmanmember: Is in hold list')
            valid_sender = True
    except TypeError:
        #  matches_p changed its syntax
        if not valid_sender and matches_p(
                sender, mlist.hold_these_nonmembers):
            debug(0, 'tummailmanmember: Is in hold list')
            valid_sender = True
    try:
        if not valid_sender and matches_p(
                sender, mlist.accept_these_nonmembers, listName):
            debug(0, 'tummailmanmember: Is in accept list')
            valid_sender = True
    except TypeError:
        #  matches_p changed its syntax
        if not valid_sender and matches_p(
                sender, mlist.accept_these_nonmembers):
            debug(0, 'tummailmanmember: Is in accept list')
            valid_sender = True

    if not valid_sender:
        debug(2, 'tummailmanmember: "%s" Not a member of list' % sender)
        if mlist.generic_nonmember_action in [2, 3]:
            debug(2, 'tummailmanmember: "%s" rejected because of '
                     'generic_nonmember_action setting' % sender)
            ret = ('reject', 'You must be a member to send to this address.')

    del(mlist)
    return ret


####################
#  loop reading data
debug(2, 'Starting')
data = {}
lineRx = re.compile(r'^\s*(\S+)\s*=(.*)$')
while True:
    line = sys.stdin.readline()
    if not line:
        break
    line = string.rstrip(line)
    debug(4, 'Read line: "%s"' % line)

    #  end of entry
    if not line:
        debug(4, 'Found the end of entry')
        checkerValue, checkerReason = listmembercheck(data)

        #  handle results
        if checkerReason:
            sys.stdout.write('action=%s %s\n\n'
                             % (checkerValue, checkerReason))
        else:
            sys.stdout.write('action=%s\n\n' % checkerReason)

        #  end of record
        sys.stdout.flush()
        data = {}
        continue

    #  parse line
    m = lineRx.match(line)
    if not m:
        debug(0, 'ERROR: Could not match line "%s"' % line)
        continue

    #  save the string
    key = m.group(1)
    value = m.group(2)
    if key not in ['protocol_state', 'protocol_name', 'queue_id']:
        value = string.lower(value)
    data[key] = value
