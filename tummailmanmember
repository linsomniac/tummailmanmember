#!/usr/bin/env python
# vim: ts=3 sw=3 ai
#
#  Postfix external policy filter for rejecting messages which are not from
#  a list member at SMTP time.
#
#  Copyright (c) 2006, 2008, 2009 Sean Reifschneider, tummy.com, ltd.
#  All Rights Reserved
#  <jafo@tummy.com>

listHashFile = '/var/lib/mailman/data/virtual-mailman.db'
suffixList = [
		( '-unsubscribe', 'check' ),
		( '-leave', 'check' ),
		( '-request', 'ignore' ),
		( '-admin', 'ignore' ),
		( '-bounces', 'ignore' ),
		( '-confirm', 'ignore' ),
		( '-join', 'ignore' ),
		( '-owner', 'ignore' ),
		( '-subscribe', 'ignore' ),
		( '', 'check' ),
		]

import syslog
import os
import string
import re
import anydbm
import sys
sys.path.append('/usr/lib/mailman')
from Mailman import MailList, Errors
from Mailman.Handlers.Moderate import matches_p

syslog.openlog(os.path.basename(sys.argv[0]), syslog.LOG_PID, syslog.LOG_MAIL)


#################
class ExceptHook:
   def __init__(self, useSyslog = 1, useStderr = 0):
      self.useSyslog = useSyslog
      self.useStderr = useStderr
   
   def __call__(self, etype, evalue, etb):
      import traceback, string
      tb = traceback.format_exception(*(etype, evalue, etb))
      tb = map(string.rstrip, tb)
      tb = string.join(tb, '\n')
      for line in string.split(tb, '\n'):
         if self.useSyslog:
            syslog.syslog(line)
         if self.useStderr:
            sys.stderr.write(line + '\n')


####################
sys.excepthook = ExceptHook(useSyslog = 1, useStderr = 1)


def listmembercheck(data, debugLevel):
	recipient = data.get('recipient')
	if not recipient:
		if debugLevel: syslog.syslog('tummailmanmember: No recipient, exiting')
		return(( None, None ))

	sender = data.get('sender')
	if not sender:
		if debugLevel: syslog.syslog('tummailmanmember: No sender, exiting')
		return(( None, None ))

	if debugLevel >= 2:
		syslog.syslog('tummailmanmember: '
				'Checking recipient "%s" and sender "%s"' % ( recipient, sender ))

	#  look up recipient in mailing list db
	mlDb = anydbm.open(listHashFile, 'r')
	res = mlDb.get(recipient)
	#  the database keys seem to be NUL terminated
	if not res: res = mlDb.get(recipient + '\0')
	if not res:
		if debugLevel >= 2:
			syslog.syslog('tummailmanmember: '
					'Recipient address is not in the mail list hash, aborting.')
		return(( None, None ))

	#  split out the recipient address into user and domain
	recipientAddressParts = string.split(recipient, '@', 1)
	if len(recipientAddressParts) != 2:
		if debugLevel >= 3:
			syslog.syslog('tummailmanmember: '
					'Recipient address not in user@domain format')
		return(( None, None ))

	#  check the suffix to see if it makes a list and what action to take
	listName = None
	listAction = None
	mlist = None
	for suffix, action in suffixList:
		if recipientAddressParts[0].endswith(suffix):
			if len(suffix):
				listName = recipientAddressParts[0][:0 - len(suffix)]
			else:
				listName = recipientAddressParts[0]

			try:
				mlist = MailList.MailList(listName, lock = False)
			except Errors.MMUnknownListError:
				continue

			if debugLevel >= 3:
				syslog.syslog('tummailmanmember: '
						'Matched suffix "%s" in local part "%s"'
						% ( suffix, recipientAddressParts[0] ))

			listAction = action
			break
	
	if debugLevel >= 3:
		syslog.syslog('tummailmanmember: '
				'Recipient list "%s" found, action "%s"'
				% ( listName, repr(listAction) ))

	#  abort due action missing or "ignore"
	if not listAction or listAction == 'ignore':
		if debugLevel >= 3:
			syslog.syslog('tummailmanmember: '
					'Aborting due to list action "%s"' % str(listAction))
		return(( None, None ))

	ret = ( 'ok', 'ok' )

	valid_sender = False

	#  accept messages from list owner - added by scott@tummy.com 20080715
	if sender in mlist.owner:
		if debugLevel: syslog.syslog('tummailmanmember: Is the list owner')
		valid_sender = True
		return(ret)

	if not valid_sender and mlist.isMember(sender):
		if debugLevel: syslog.syslog('tummailmanmember: Is a member')
		valid_sender = True

	try:
		if not valid_sender and matches_p(sender, mlist.hold_these_nonmembers,
				listName):
			if debugLevel: syslog.syslog('tummailmanmember: Is in hold list')
			valid_sender = True
	except TypeError:
		#  matches_p changed its syntax
		if not valid_sender and matches_p(sender, mlist.hold_these_nonmembers):
			if debugLevel: syslog.syslog('tummailmanmember: Is in hold list')
			valid_sender = True
	try:
		if not valid_sender and matches_p(sender, mlist.accept_these_nonmembers,
				listName):
			if debugLevel: syslog.syslog('tummailmanmember: Is in accept list')
			valid_sender = True
	except TypeError:
		#  matches_p changed its syntax
		if not valid_sender and matches_p(sender, mlist.accept_these_nonmembers):
			if debugLevel: syslog.syslog('tummailmanmember: Is in accept list')
			valid_sender = True
	
	if not valid_sender:
		if debugLevel >= 2:
			syslog.syslog('tummailmanmember: "%s" Not a member of list' % sender)
		if mlist.generic_nonmember_action in [2, 3]:
			if debugLevel >= 2:
				syslog.syslog(('tummailmanmember: "%s" rejected because of '
						'generic_nonmember_action setting') % sender)
			ret = ( 'reject', 'You must be a member to send to this address.' )

	del(mlist)
	return(ret)


####################
#  loop reading data
debugLevel = 2
if debugLevel >= 2: syslog.syslog('Starting')
data = {}
lineRx = re.compile(r'^\s*(\S+)\s*=(.*)$')
while 1:
	line = sys.stdin.readline()
	if not line: break
	line = string.rstrip(line)
	if debugLevel >= 4: syslog.syslog('Read line: "%s"' % line)

	#  end of entry
	if not line:
		if debugLevel >= 4: syslog.syslog('Found the end of entry')
		checkerValue, checkerReason = listmembercheck(data, debugLevel)

		#  handle results
		if checkerValue == 'defer':
			sys.stdout.write('action=defer_if_permit %s\n\n' % checkerReason)

		elif checkerValue == 'reject':
			sys.stdout.write('action=reject %s\n\n' % checkerReason)

		else:
			sys.stdout.write('action=dunno\n\n')

		#  end of record
		sys.stdout.flush()
		data = {}
		continue

	#  parse line
	m = lineRx.match(line)
	if not m: 
		syslog.syslog('ERROR: Could not match line "%s"' % line)
		continue

	#  save the string
	key = m.group(1)
	value = m.group(2)
	if key not in [ 'protocol_state', 'protocol_name', 'queue_id' ]:
		value = string.lower(value)
	data[key] = value
